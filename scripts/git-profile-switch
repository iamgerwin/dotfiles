#!/bin/bash

# Git Profile Switcher
# Switches between different git profiles with SSH keys and GitHub CLI accounts

CONFIG_DIR="$HOME/dotfiles/config/git-profiles"
SCRIPT_NAME=$(basename "$0")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

# Function to show usage
usage() {
    echo "Usage: $SCRIPT_NAME [PROFILE_NAME]"
    echo ""
    echo "Switch between different git profiles (user, email, SSH key)"
    echo ""
    echo "Arguments:"
    echo "  PROFILE_NAME    Name of the profile to switch to (without .conf extension)"
    echo ""
    echo "Commands:"
    echo "  $SCRIPT_NAME list           List all available profiles"
    echo "  $SCRIPT_NAME current        Show current git configuration"
    echo "  $SCRIPT_NAME help           Show this help message"
    echo ""
    echo "Examples:"
    echo "  $SCRIPT_NAME personal       Switch to personal profile"
    echo "  $SCRIPT_NAME work          Switch to work profile"
    echo ""
    echo "Profile configuration files should be placed in:"
    echo "  $CONFIG_DIR/"
    exit 0
}

# Function to list available profiles
list_profiles() {
    print_color "$BLUE" "Available git profiles:"
    echo ""

    if [ ! -d "$CONFIG_DIR" ]; then
        print_color "$RED" "Config directory not found: $CONFIG_DIR"
        exit 1
    fi

    local found=false
    for config_file in "$CONFIG_DIR"/*.conf; do
        if [ -f "$config_file" ]; then
            local profile_name=$(basename "$config_file" .conf)
            if [ "$profile_name" != "example" ]; then
                echo "  - $profile_name"
                found=true
            fi
        fi
    done

    if [ "$found" = false ]; then
        print_color "$YELLOW" "No profiles found. Create a profile by copying:"
        echo "  $CONFIG_DIR/example.conf"
        echo "  to"
        echo "  $CONFIG_DIR/yourprofile.conf"
    fi
    echo ""
}

# Function to show current configuration
show_current() {
    print_color "$BLUE" "Current git configuration:"
    echo ""

    # Check if we're in a git repository
    if git rev-parse --git-dir > /dev/null 2>&1; then
        echo "Repository configuration:"
        echo "  User:  $(git config user.name) <$(git config user.email)>"

        local ssh_cmd=$(git config core.sshCommand)
        if [ -n "$ssh_cmd" ]; then
            echo "  SSH:   $ssh_cmd"
        fi
    else
        echo "Global configuration:"
        echo "  User:  $(git config --global user.name) <$(git config --global user.email)>"
    fi

    echo ""
    echo "GitHub CLI account:"
    if command -v gh &> /dev/null; then
        gh auth status 2>&1 | grep -E "Logged in|account" | sed 's/^/  /'
    else
        echo "  GitHub CLI (gh) not installed"
    fi
    echo ""
}

# Function to load and apply profile
switch_profile() {
    local profile_name=$1
    local config_file="$CONFIG_DIR/${profile_name}.conf"

    if [ ! -f "$config_file" ]; then
        print_color "$RED" "Profile not found: $profile_name"
        echo "Available profiles:"
        list_profiles
        exit 1
    fi

    # Source the configuration file
    source "$config_file"

    # Validate required variables
    if [ -z "$GIT_USER_NAME" ] || [ -z "$GIT_USER_EMAIL" ]; then
        print_color "$RED" "Error: GIT_USER_NAME and GIT_USER_EMAIL must be set in $config_file"
        exit 1
    fi

    print_color "$BLUE" "Switching to profile: $profile_name"
    echo ""

    # Determine scope (local repo or global)
    if git rev-parse --git-dir > /dev/null 2>&1; then
        print_color "$YELLOW" "Configuring for current repository..."
        local scope=""
    else
        print_color "$YELLOW" "No git repository found. Configuring globally..."
        local scope="--global"
    fi

    # Set git user configuration
    git config $scope user.name "$GIT_USER_NAME"
    git config $scope user.email "$GIT_USER_EMAIL"
    print_color "$GREEN" "✓ Git user set to: $GIT_USER_NAME <$GIT_USER_EMAIL>"

    # Set SSH command if SSH key is specified
    if [ -n "$SSH_KEY_NAME" ]; then
        local ssh_key_path=""
        # Check in dotfiles SSH directory first
        if [ -f "$HOME/dotfiles/ssh-keys/$SSH_KEY_NAME" ]; then
            ssh_key_path="$HOME/dotfiles/ssh-keys/$SSH_KEY_NAME"
        # Fall back to system SSH directory
        elif [ -f "$HOME/.ssh/$SSH_KEY_NAME" ]; then
            ssh_key_path="$HOME/.ssh/$SSH_KEY_NAME"
        fi

        if [ -n "$ssh_key_path" ]; then
            git config $scope core.sshCommand "ssh -i $ssh_key_path"
            print_color "$GREEN" "✓ SSH key configured: $SSH_KEY_NAME"
        else
            print_color "$YELLOW" "⚠ SSH key not found: $SSH_KEY_NAME"
            echo "  Checked: ~/dotfiles/ssh-keys/ and ~/.ssh/"
        fi
    fi

    # Set GPG signing key if specified
    if [ -n "$GIT_SIGNING_KEY" ]; then
        git config $scope user.signingkey "$GIT_SIGNING_KEY"
        git config $scope commit.gpgsign true
        print_color "$GREEN" "✓ GPG signing configured: $GIT_SIGNING_KEY"
    fi

    # Switch GitHub CLI account if specified and gh is installed
    if [ -n "$GH_ACCOUNT" ] && command -v gh &> /dev/null; then
        echo ""
        print_color "$YELLOW" "GitHub CLI account switching:"
        print_color "$YELLOW" "If '$GH_ACCOUNT' is not the active account, run:"
        echo "  gh auth switch"
        echo "  (and select $GH_ACCOUNT)"
    fi

    echo ""
    print_color "$GREEN" "Profile '$profile_name' activated successfully!"
}

# Main script logic
case "$1" in
    "" | "-h" | "--help" | "help")
        usage
        ;;
    "list" | "-l" | "--list")
        list_profiles
        ;;
    "current" | "-c" | "--current")
        show_current
        ;;
    *)
        switch_profile "$1"
        ;;
esac