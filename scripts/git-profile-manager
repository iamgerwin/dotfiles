#!/bin/bash

# Git Profile Manager
# Manage git profiles with full CRUD operations and GitHub/gh integration

CONFIG_DIR="$HOME/dotfiles/config/git-profiles"
SCRIPT_NAME=$(basename "$0")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

# Function to show usage
usage() {
    print_color "$CYAN" "Git Profile Manager - Comprehensive profile management tool"
    echo ""
    echo "Usage: $SCRIPT_NAME [COMMAND] [OPTIONS]"
    echo ""
    print_color "$YELLOW" "Commands:"
    echo "  create, new      Create a new git profile"
    echo "  list, ls         List all profiles with details"
    echo "  update, edit     Update an existing profile"
    echo "  delete, rm       Delete a profile"
    echo "  switch, use      Switch to a profile (same as git-profile-switch)"
    echo "  current          Show current active profile"
    echo "  show             Show details of a specific profile"
    echo "  clone            Clone a profile to create a new one"
    echo "  help             Show this help message"
    echo ""
    print_color "$YELLOW" "Examples:"
    echo "  $SCRIPT_NAME create          # Interactive profile creation"
    echo "  $SCRIPT_NAME list            # List all profiles"
    echo "  $SCRIPT_NAME update personal # Update personal profile"
    echo "  $SCRIPT_NAME delete work     # Delete work profile"
    echo "  $SCRIPT_NAME switch personal # Switch to personal profile"
    echo "  $SCRIPT_NAME show personal   # Show personal profile details"
    echo "  $SCRIPT_NAME clone personal team # Clone personal to create team profile"
    exit 0
}

# Ensure config directory exists
ensure_config_dir() {
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir -p "$CONFIG_DIR"
        print_color "$GREEN" "Created config directory: $CONFIG_DIR"
    fi
}

# Function to validate email
validate_email() {
    local email=$1
    if [[ "$email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to check if profile exists
profile_exists() {
    local profile_name=$1
    local config_file="$CONFIG_DIR/${profile_name}.conf"
    [ -f "$config_file" ]
}

# Function to create a new profile
create_profile() {
    ensure_config_dir

    print_color "$CYAN" "=== Create New Git Profile ==="
    echo ""

    # Get profile name
    while true; do
        read -p "Profile name (e.g., personal, work): " profile_name
        if [ -z "$profile_name" ]; then
            print_color "$RED" "Profile name cannot be empty"
            continue
        fi
        if [ "$profile_name" = "example" ]; then
            print_color "$RED" "Cannot use 'example' as profile name"
            continue
        fi
        if profile_exists "$profile_name"; then
            print_color "$RED" "Profile '$profile_name' already exists"
            read -p "Overwrite? (y/N): " overwrite
            if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
                continue
            fi
        fi
        break
    done

    # Get Git user name
    read -p "Git user name: " git_user_name
    while [ -z "$git_user_name" ]; do
        print_color "$RED" "Git user name cannot be empty"
        read -p "Git user name: " git_user_name
    done

    # Get Git email
    while true; do
        read -p "Git email: " git_email
        if [ -z "$git_email" ]; then
            print_color "$RED" "Git email cannot be empty"
            continue
        fi
        if ! validate_email "$git_email"; then
            print_color "$RED" "Invalid email format"
            continue
        fi
        break
    done

    # Get SSH key
    print_color "$YELLOW" "\nAvailable SSH keys:"
    # Check dotfiles SSH directory first
    if [ -d "$HOME/dotfiles/ssh-keys" ]; then
        for key in "$HOME/dotfiles/ssh-keys"/*.pub; do
            [ -f "$key" ] && basename "$key" .pub | sed 's/^/  - /'
        done
    fi
    # Also check system SSH directory
    ls -1 ~/.ssh/*.pub 2>/dev/null | while read -r key; do
        basename "$key" .pub | sed 's/^/  - /'
    done | sort -u
    echo ""
    read -p "SSH key name (without path, e.g., id_rsa, github-personal): " ssh_key

    # Validate SSH key if provided
    if [ -n "$ssh_key" ]; then
        local key_found=false
        # Check in dotfiles SSH directory
        if [ -f "$HOME/dotfiles/ssh-keys/$ssh_key" ]; then
            key_found=true
        # Check in system SSH directory
        elif [ -f "$HOME/.ssh/$ssh_key" ]; then
            key_found=true
        fi

        if [ "$key_found" = false ]; then
            print_color "$YELLOW" "Warning: SSH key '$ssh_key' not found"
            echo "Checked locations:"
            echo "  - ~/dotfiles/ssh-keys/$ssh_key"
            echo "  - ~/.ssh/$ssh_key"
            read -p "Continue anyway? (y/N): " continue_anyway
            if [[ ! "$continue_anyway" =~ ^[Yy]$ ]]; then
                print_color "$RED" "Profile creation cancelled"
                exit 1
            fi
        fi
    fi

    # Get GitHub account
    if command -v gh &> /dev/null; then
        print_color "$YELLOW" "\nGitHub CLI accounts:"
        gh auth status 2>&1 | grep -E "account" | sed 's/^/  /'
        echo ""
    fi
    read -p "GitHub account name (optional): " gh_account

    # Get GPG signing key
    read -p "GPG signing key ID (optional): " gpg_key

    # Create the profile configuration
    local config_file="$CONFIG_DIR/${profile_name}.conf"
    cat > "$config_file" << EOF
# Git Profile: $profile_name
# Created: $(date)

# Git user configuration
GIT_USER_NAME="$git_user_name"
GIT_USER_EMAIL="$git_email"

# SSH key path (relative to ~/.ssh/)
SSH_KEY_NAME="$ssh_key"

# GitHub CLI account (optional)
GH_ACCOUNT="$gh_account"

# GPG signing key (optional)
GIT_SIGNING_KEY="$gpg_key"
EOF

    print_color "$GREEN" "\n✓ Profile '$profile_name' created successfully!"

    # Ask if user wants to switch to the new profile
    read -p "Switch to this profile now? (Y/n): " switch_now
    if [[ ! "$switch_now" =~ ^[Nn]$ ]]; then
        echo ""
        ~/dotfiles/scripts/git-profile-switch "$profile_name"
    fi
}

# Function to list all profiles
list_profiles() {
    ensure_config_dir

    print_color "$CYAN" "=== Git Profiles ==="
    echo ""

    local found=false
    for config_file in "$CONFIG_DIR"/*.conf; do
        if [ -f "$config_file" ]; then
            local profile_name=$(basename "$config_file" .conf)
            if [ "$profile_name" = "example" ]; then
                continue
            fi

            found=true
            # Source the config to get details
            source "$config_file"

            print_color "$BLUE" "▸ $profile_name"
            echo "  Name:  $GIT_USER_NAME"
            echo "  Email: $GIT_USER_EMAIL"

            if [ -n "$SSH_KEY_NAME" ]; then
                if [ -f "$HOME/.ssh/$SSH_KEY_NAME" ]; then
                    echo "  SSH:   $SSH_KEY_NAME ✓"
                else
                    echo "  SSH:   $SSH_KEY_NAME ✗ (not found)"
                fi
            fi

            if [ -n "$GH_ACCOUNT" ]; then
                echo "  GitHub: $GH_ACCOUNT"
            fi

            if [ -n "$GIT_SIGNING_KEY" ]; then
                echo "  GPG:   $GIT_SIGNING_KEY"
            fi
            echo ""
        fi
    done

    if [ "$found" = false ]; then
        print_color "$YELLOW" "No profiles found."
        echo "Create one with: $SCRIPT_NAME create"
    fi

    # Show current active profile
    print_color "$CYAN" "=== Current Configuration ==="
    local current_email
    if git rev-parse --git-dir > /dev/null 2>&1; then
        current_email=$(git config user.email)
        echo "Repository: $(git config user.name) <$current_email>"
    else
        current_email=$(git config --global user.email)
        echo "Global: $(git config --global user.name) <$current_email>"
    fi

    # Find matching profile
    local active_profile=""
    for config_file in "$CONFIG_DIR"/*.conf; do
        if [ -f "$config_file" ]; then
            local profile_name=$(basename "$config_file" .conf)
            if [ "$profile_name" = "example" ]; then
                continue
            fi
            source "$config_file"
            if [ "$GIT_USER_EMAIL" = "$current_email" ]; then
                active_profile="$profile_name"
                break
            fi
        fi
    done

    if [ -n "$active_profile" ]; then
        print_color "$GREEN" "Active profile: $active_profile"
    else
        print_color "$YELLOW" "No matching profile found for current configuration"
    fi
}

# Function to show profile details
show_profile() {
    local profile_name=$1

    if [ -z "$profile_name" ]; then
        print_color "$RED" "Error: Profile name required"
        echo "Usage: $SCRIPT_NAME show PROFILE_NAME"
        exit 1
    fi

    if ! profile_exists "$profile_name"; then
        print_color "$RED" "Profile '$profile_name' not found"
        exit 1
    fi

    local config_file="$CONFIG_DIR/${profile_name}.conf"

    print_color "$CYAN" "=== Profile: $profile_name ==="
    echo ""
    print_color "$YELLOW" "Configuration file: $config_file"
    echo ""
    cat "$config_file"
}

# Function to update a profile
update_profile() {
    local profile_name=$1

    if [ -z "$profile_name" ]; then
        print_color "$RED" "Error: Profile name required"
        echo "Usage: $SCRIPT_NAME update PROFILE_NAME"
        exit 1
    fi

    if ! profile_exists "$profile_name"; then
        print_color "$RED" "Profile '$profile_name' not found"
        exit 1
    fi

    local config_file="$CONFIG_DIR/${profile_name}.conf"

    # Source existing config
    source "$config_file"

    print_color "$CYAN" "=== Update Profile: $profile_name ==="
    echo "Leave blank to keep current value"
    echo ""

    # Update Git user name
    read -p "Git user name [$GIT_USER_NAME]: " new_name
    if [ -n "$new_name" ]; then
        GIT_USER_NAME="$new_name"
    fi

    # Update Git email
    while true; do
        read -p "Git email [$GIT_USER_EMAIL]: " new_email
        if [ -z "$new_email" ]; then
            break
        fi
        if validate_email "$new_email"; then
            GIT_USER_EMAIL="$new_email"
            break
        else
            print_color "$RED" "Invalid email format"
        fi
    done

    # Update SSH key
    print_color "$YELLOW" "\nAvailable SSH keys:"
    ls -1 ~/.ssh/*.pub 2>/dev/null | while read -r key; do
        basename "$key" .pub | sed 's/^/  - /'
    done
    echo ""
    read -p "SSH key name [$SSH_KEY_NAME]: " new_ssh
    if [ -n "$new_ssh" ]; then
        SSH_KEY_NAME="$new_ssh"
    fi

    # Update GitHub account
    read -p "GitHub account [$GH_ACCOUNT]: " new_gh
    if [ -n "$new_gh" ]; then
        GH_ACCOUNT="$new_gh"
    fi

    # Update GPG key
    read -p "GPG signing key [$GIT_SIGNING_KEY]: " new_gpg
    if [ -n "$new_gpg" ]; then
        GIT_SIGNING_KEY="$new_gpg"
    fi

    # Save updated configuration
    cat > "$config_file" << EOF
# Git Profile: $profile_name
# Updated: $(date)

# Git user configuration
GIT_USER_NAME="$GIT_USER_NAME"
GIT_USER_EMAIL="$GIT_USER_EMAIL"

# SSH key path (relative to ~/.ssh/)
SSH_KEY_NAME="$SSH_KEY_NAME"

# GitHub CLI account (optional)
GH_ACCOUNT="$GH_ACCOUNT"

# GPG signing key (optional)
GIT_SIGNING_KEY="$GIT_SIGNING_KEY"
EOF

    print_color "$GREEN" "\n✓ Profile '$profile_name' updated successfully!"
}

# Function to delete a profile
delete_profile() {
    local profile_name=$1

    if [ -z "$profile_name" ]; then
        print_color "$RED" "Error: Profile name required"
        echo "Usage: $SCRIPT_NAME delete PROFILE_NAME"
        exit 1
    fi

    if [ "$profile_name" = "example" ]; then
        print_color "$RED" "Cannot delete the example profile"
        exit 1
    fi

    if ! profile_exists "$profile_name"; then
        print_color "$RED" "Profile '$profile_name' not found"
        exit 1
    fi

    local config_file="$CONFIG_DIR/${profile_name}.conf"

    # Show profile details before deletion
    print_color "$YELLOW" "Profile to be deleted:"
    show_profile "$profile_name"

    # Confirm deletion
    print_color "$RED" "\nThis action cannot be undone!"
    read -p "Delete profile '$profile_name'? (y/N): " confirm

    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        rm "$config_file"
        print_color "$GREEN" "✓ Profile '$profile_name' deleted successfully"
    else
        print_color "$YELLOW" "Deletion cancelled"
    fi
}

# Function to clone a profile
clone_profile() {
    local source_profile=$1
    local target_profile=$2

    if [ -z "$source_profile" ] || [ -z "$target_profile" ]; then
        print_color "$RED" "Error: Source and target profile names required"
        echo "Usage: $SCRIPT_NAME clone SOURCE_PROFILE TARGET_PROFILE"
        exit 1
    fi

    if ! profile_exists "$source_profile"; then
        print_color "$RED" "Source profile '$source_profile' not found"
        exit 1
    fi

    if profile_exists "$target_profile"; then
        print_color "$RED" "Target profile '$target_profile' already exists"
        read -p "Overwrite? (y/N): " overwrite
        if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi

    ensure_config_dir

    # Copy the profile
    cp "$CONFIG_DIR/${source_profile}.conf" "$CONFIG_DIR/${target_profile}.conf"

    # Update the header comment
    sed -i '' "s/^# Git Profile: .*/# Git Profile: $target_profile/" "$CONFIG_DIR/${target_profile}.conf"
    sed -i '' "s/^# Created: .*/# Cloned from: $source_profile on $(date)/" "$CONFIG_DIR/${target_profile}.conf"

    print_color "$GREEN" "✓ Profile '$source_profile' cloned to '$target_profile'"
    print_color "$YELLOW" "Don't forget to update the cloned profile with: $SCRIPT_NAME update $target_profile"
}

# Function to show current profile
show_current_profile() {
    print_color "$CYAN" "=== Current Git Configuration ==="
    echo ""

    local current_email
    local current_name
    local scope

    if git rev-parse --git-dir > /dev/null 2>&1; then
        current_email=$(git config user.email)
        current_name=$(git config user.name)
        scope="Repository"
    else
        current_email=$(git config --global user.email)
        current_name=$(git config --global user.name)
        scope="Global"
    fi

    echo "$scope configuration:"
    echo "  Name:  $current_name"
    echo "  Email: $current_email"

    local ssh_cmd=$(git config core.sshCommand 2>/dev/null || git config --global core.sshCommand 2>/dev/null)
    if [ -n "$ssh_cmd" ]; then
        echo "  SSH:   $ssh_cmd"
    fi

    # Find matching profile
    local active_profile=""
    for config_file in "$CONFIG_DIR"/*.conf; do
        if [ -f "$config_file" ]; then
            local profile_name=$(basename "$config_file" .conf)
            if [ "$profile_name" = "example" ]; then
                continue
            fi
            source "$config_file"
            if [ "$GIT_USER_EMAIL" = "$current_email" ] && [ "$GIT_USER_NAME" = "$current_name" ]; then
                active_profile="$profile_name"
                break
            fi
        fi
    done

    echo ""
    if [ -n "$active_profile" ]; then
        print_color "$GREEN" "✓ Active profile: $active_profile"
    else
        print_color "$YELLOW" "⚠ No matching profile found"
        echo "  Create one with: $SCRIPT_NAME create"
    fi

    # Show GitHub CLI status
    if command -v gh &> /dev/null; then
        echo ""
        print_color "$CYAN" "GitHub CLI Status:"
        gh auth status 2>&1 | grep -E "Logged in|account" | sed 's/^/  /'
    fi
}

# Main script logic
case "$1" in
    "create" | "new")
        create_profile
        ;;
    "list" | "ls")
        list_profiles
        ;;
    "current")
        show_current_profile
        ;;
    "show")
        show_profile "$2"
        ;;
    "update" | "edit")
        update_profile "$2"
        ;;
    "delete" | "rm")
        delete_profile "$2"
        ;;
    "clone")
        clone_profile "$2" "$3"
        ;;
    "switch" | "use")
        ~/dotfiles/scripts/git-profile-switch "$2"
        ;;
    "help" | "-h" | "--help" | "")
        usage
        ;;
    *)
        print_color "$RED" "Unknown command: $1"
        echo ""
        usage
        ;;
esac