#!/bin/bash

# Import Git Profiles and SSH Keys Script
# Automatically imports existing Git configurations and SSH keys from the system

DOTFILES_DIR="$HOME/dotfiles"
CONFIG_DIR="$DOTFILES_DIR/config/git-profiles"
SSH_KEYS_DIR="$DOTFILES_DIR/ssh-keys"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    shift
    echo -e "${color}$*${NC}"
}

print_header() {
    echo
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}  $1${NC}"
    echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Ensure directories exist
ensure_directories() {
    mkdir -p "$CONFIG_DIR"
    mkdir -p "$SSH_KEYS_DIR"
}

# Import existing Git configuration
import_git_config() {
    print_header "Importing Git Configuration"

    local git_user=$(git config --global user.name 2>/dev/null)
    local git_email=$(git config --global user.email 2>/dev/null)
    local git_signing_key=$(git config --global user.signingkey 2>/dev/null)

    if [[ -z "$git_user" ]] && [[ -z "$git_email" ]]; then
        print_warning "No global Git configuration found"
        return 1
    fi

    print_info "Found Git configuration:"
    echo "  User:  $git_user"
    echo "  Email: $git_email"
    if [[ -n "$git_signing_key" ]]; then
        echo "  GPG:   $git_signing_key"
    fi
    echo

    # Detect GitHub CLI account
    local gh_account=""
    if command -v gh &> /dev/null; then
        gh_account=$(gh auth status 2>&1 | grep -o "Logged in to github.com account \w*" | awk '{print $NF}' || echo "")
        if [[ -n "$gh_account" ]]; then
            print_info "GitHub CLI account: $gh_account"
        fi
    fi

    return 0
}

# Import SSH keys
import_ssh_keys() {
    print_header "Importing SSH Keys"

    local keys_imported=0
    local keys_list=""

    if [[ ! -d "$HOME/.ssh" ]]; then
        print_warning "No .ssh directory found"
        return 1
    fi

    # Find all private keys
    for key_file in "$HOME/.ssh"/*; do
        if [[ -f "$key_file" ]] && [[ ! "$key_file" =~ \.pub$ ]] && [[ ! "$key_file" =~ known_hosts|authorized_keys|config$ ]]; then
            # Check if it's actually a private key
            if head -n 1 "$key_file" 2>/dev/null | grep -q "PRIVATE KEY\|OPENSSH PRIVATE KEY"; then
                local key_name=$(basename "$key_file")
                keys_list="${keys_list}  - $key_name\n"
                keys_imported=$((keys_imported + 1))
            fi
        fi
    done

    if [[ $keys_imported -eq 0 ]]; then
        print_warning "No SSH keys found in ~/.ssh"
        return 1
    fi

    print_success "Found $keys_imported SSH key(s):"
    echo -e "$keys_list"

    return 0
}

# Detect profile context from SSH key names
detect_profile_context() {
    local key_name=$1
    local context="default"

    # Common patterns for profile detection
    case "$key_name" in
        *personal*|*home*)
            context="personal"
            ;;
        *work*|*company*|*corp*)
            context="work"
            ;;
        *github*)
            context="github"
            ;;
        *gitlab*)
            context="gitlab"
            ;;
        *bitbucket*)
            context="bitbucket"
            ;;
        *)
            # Try to detect from SSH config
            if [[ -f "$HOME/.ssh/config" ]]; then
                local host_entry=$(grep -B5 "IdentityFile.*$key_name" "$HOME/.ssh/config" 2>/dev/null | grep "^Host " | head -1 | awk '{print $2}')
                if [[ -n "$host_entry" ]]; then
                    context="${host_entry%%.*}"
                fi
            fi
            ;;
    esac

    echo "$context"
}

# Create profile from imported data
create_profile() {
    local profile_name=$1
    local git_user=$2
    local git_email=$3
    local ssh_key=$4
    local gh_account=$5
    local git_signing_key=$6

    local profile_file="$CONFIG_DIR/${profile_name}.conf"

    cat > "$profile_file" << EOF
# Git Profile: $profile_name
# Imported: $(date)

# Git user configuration
GIT_USER_NAME="$git_user"
GIT_USER_EMAIL="$git_email"

# SSH key path (relative to ~/.ssh/)
SSH_KEY_NAME="$ssh_key"

# GitHub CLI account (optional)
GH_ACCOUNT="$gh_account"

# GPG signing key (optional)
GIT_SIGNING_KEY="$git_signing_key"
EOF

    print_success "Created profile: $profile_name"
}

# Perform migration of SSH keys
migrate_ssh_key() {
    local key_name=$1
    local src_path="$HOME/.ssh/$key_name"
    local dest_path="$SSH_KEYS_DIR/$key_name"

    if [[ -f "$dest_path" ]]; then
        print_warning "Key already exists in dotfiles: $key_name"
        return 1
    fi

    # Copy the key
    cp "$src_path" "$dest_path"
    chmod 600 "$dest_path"

    # Copy public key if exists
    if [[ -f "$src_path.pub" ]]; then
        cp "$src_path.pub" "$dest_path.pub"
        chmod 644 "$dest_path.pub"
    fi

    # Create symlink back
    if [[ ! -L "$src_path" ]]; then
        mv "$src_path" "$src_path.backup.$TIMESTAMP"
        ln -sf "$dest_path" "$src_path"

        if [[ -f "$src_path.pub" ]]; then
            mv "$src_path.pub" "$src_path.pub.backup.$TIMESTAMP"
            ln -sf "$dest_path.pub" "$src_path.pub"
        fi
    fi

    print_success "Migrated: $key_name"
    return 0
}

# Interactive import process
interactive_import() {
    print_header "Git Profile and SSH Key Import Wizard"

    ensure_directories

    # Import Git configuration
    local git_user=$(git config --global user.name 2>/dev/null)
    local git_email=$(git config --global user.email 2>/dev/null)
    local git_signing_key=$(git config --global user.signingkey 2>/dev/null)
    local gh_account=""

    if ! import_git_config; then
        print_info "No Git configuration to import. You can set it up manually later."
        echo
    fi

    # Get GitHub CLI account if available
    if command -v gh &> /dev/null; then
        gh_account=$(gh auth status 2>&1 | grep -o "Logged in to github.com account \w*" | awk '{print $NF}' || echo "")
    fi

    # Import SSH keys
    if ! import_ssh_keys; then
        print_info "No SSH keys to import. You can add them manually later."
        echo
        return
    fi

    # Ask what to do
    echo
    print_info "What would you like to do?"
    echo "  1) Import everything automatically"
    echo "  2) Select specific items to import"
    echo "  3) Just migrate SSH keys (no profile creation)"
    echo "  4) Cancel"
    echo
    read -p "Enter choice [1-4]: " choice

    case $choice in
        1)
            # Automatic import
            print_header "Automatic Import"

            # Find all SSH keys and create profiles
            for key_file in "$HOME/.ssh"/*; do
                if [[ -f "$key_file" ]] && [[ ! "$key_file" =~ \.pub$ ]] && [[ ! "$key_file" =~ known_hosts|authorized_keys|config$ ]]; then
                    if head -n 1 "$key_file" 2>/dev/null | grep -q "PRIVATE KEY\|OPENSSH PRIVATE KEY"; then
                        local key_name=$(basename "$key_file")
                        local context=$(detect_profile_context "$key_name")

                        # Create profile if Git config exists
                        if [[ -n "$git_user" ]] && [[ -n "$git_email" ]]; then
                            if [[ "$context" == "default" ]]; then
                                context="${key_name%_*}"  # Use key prefix as context
                            fi
                            create_profile "$context" "$git_user" "$git_email" "$key_name" "$gh_account" "$git_signing_key"
                        fi

                        # Migrate SSH key
                        print_info "Migrating SSH key: $key_name"
                        migrate_ssh_key "$key_name"
                    fi
                fi
            done
            ;;

        2)
            # Selective import
            print_header "Selective Import"

            # Select SSH keys to import
            for key_file in "$HOME/.ssh"/*; do
                if [[ -f "$key_file" ]] && [[ ! "$key_file" =~ \.pub$ ]] && [[ ! "$key_file" =~ known_hosts|authorized_keys|config$ ]]; then
                    if head -n 1 "$key_file" 2>/dev/null | grep -q "PRIVATE KEY\|OPENSSH PRIVATE KEY"; then
                        local key_name=$(basename "$key_file")

                        read -p "Import SSH key '$key_name'? (y/n) " -n 1 -r
                        echo
                        if [[ $REPLY =~ ^[Yy]$ ]]; then
                            migrate_ssh_key "$key_name"

                            # Ask about creating profile
                            if [[ -n "$git_user" ]] && [[ -n "$git_email" ]]; then
                                read -p "Create Git profile for this key? (y/n) " -n 1 -r
                                echo
                                if [[ $REPLY =~ ^[Yy]$ ]]; then
                                    read -p "Profile name (or press Enter for auto): " profile_name
                                    if [[ -z "$profile_name" ]]; then
                                        profile_name=$(detect_profile_context "$key_name")
                                    fi
                                    create_profile "$profile_name" "$git_user" "$git_email" "$key_name" "$gh_account" "$git_signing_key"
                                fi
                            fi
                        fi
                    fi
                fi
            done
            ;;

        3)
            # Just migrate SSH keys
            print_header "SSH Key Migration Only"

            for key_file in "$HOME/.ssh"/*; do
                if [[ -f "$key_file" ]] && [[ ! "$key_file" =~ \.pub$ ]] && [[ ! "$key_file" =~ known_hosts|authorized_keys|config$ ]]; then
                    if head -n 1 "$key_file" 2>/dev/null | grep -q "PRIVATE KEY\|OPENSSH PRIVATE KEY"; then
                        local key_name=$(basename "$key_file")
                        migrate_ssh_key "$key_name"
                    fi
                fi
            done
            ;;

        4)
            print_info "Import cancelled"
            exit 0
            ;;

        *)
            print_error "Invalid choice"
            exit 1
            ;;
    esac

    print_header "Import Complete!"

    print_success "Your Git profiles and SSH keys have been imported."
    echo
    print_info "Next steps:"
    echo "  • Review profiles: gpm list"
    echo "  • Edit profiles: gpm update <profile>"
    echo "  • Switch profiles: gp <profile>"
    echo "  • Manage SSH keys: sshkm list"
    echo

    # Show what was created
    if [[ -d "$CONFIG_DIR" ]]; then
        local profile_count=$(ls -1 "$CONFIG_DIR"/*.conf 2>/dev/null | grep -v example.conf | wc -l | tr -d ' ')
        if [[ $profile_count -gt 0 ]]; then
            print_info "Created $profile_count profile(s):"
            for profile in "$CONFIG_DIR"/*.conf; do
                if [[ -f "$profile" ]] && [[ "$(basename "$profile")" != "example.conf" ]]; then
                    echo "  - $(basename "$profile" .conf)"
                fi
            done
        fi
    fi
}

# Quick import (non-interactive)
quick_import() {
    print_header "Quick Import - Git Profiles and SSH Keys"

    ensure_directories

    local imported_count=0

    # Import current Git config as default profile
    local git_user=$(git config --global user.name 2>/dev/null)
    local git_email=$(git config --global user.email 2>/dev/null)

    if [[ -n "$git_user" ]] && [[ -n "$git_email" ]]; then
        print_info "Importing Git configuration as 'default' profile"

        # Find first available SSH key
        local default_ssh_key=""
        for key_file in "$HOME/.ssh"/*; do
            if [[ -f "$key_file" ]] && [[ ! "$key_file" =~ \.pub$ ]] && [[ ! "$key_file" =~ known_hosts|authorized_keys|config$ ]]; then
                if head -n 1 "$key_file" 2>/dev/null | grep -q "PRIVATE KEY\|OPENSSH PRIVATE KEY"; then
                    default_ssh_key=$(basename "$key_file")
                    break
                fi
            fi
        done

        create_profile "imported" "$git_user" "$git_email" "$default_ssh_key" "" ""
        imported_count=$((imported_count + 1))
    fi

    # Migrate all SSH keys
    print_info "Migrating SSH keys..."
    for key_file in "$HOME/.ssh"/*; do
        if [[ -f "$key_file" ]] && [[ ! "$key_file" =~ \.pub$ ]] && [[ ! "$key_file" =~ known_hosts|authorized_keys|config$ ]]; then
            if head -n 1 "$key_file" 2>/dev/null | grep -q "PRIVATE KEY\|OPENSSH PRIVATE KEY"; then
                local key_name=$(basename "$key_file")
                if migrate_ssh_key "$key_name"; then
                    imported_count=$((imported_count + 1))
                fi
            fi
        fi
    done

    if [[ $imported_count -gt 0 ]]; then
        print_success "Quick import completed: $imported_count item(s) imported"
    else
        print_warning "Nothing to import"
    fi
}

# Main script logic
case "${1:-}" in
    "--quick" | "-q")
        quick_import
        ;;
    "--help" | "-h")
        echo "Git Profile and SSH Key Import Tool"
        echo ""
        echo "Usage: $0 [OPTIONS]"
        echo ""
        echo "Options:"
        echo "  --quick, -q     Quick import without prompts"
        echo "  --help, -h      Show this help message"
        echo ""
        echo "Without options, runs interactive import wizard"
        ;;
    *)
        interactive_import
        ;;
esac