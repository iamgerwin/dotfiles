#!/usr/bin/env bash
# Quick copy script for AI prompt templates
# Usage: prompt-copy [template-name]

set -e

# Configuration
AI_PROMPTS_DIR="${AI_PROMPTS_DIR:-$HOME/ai-prompts}"
TEMPLATES_DIR="$HOME/dotfiles/templates"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m'

# Functions
print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

# Show available templates
show_templates() {
    echo -e "${BLUE}Available Templates:${NC}"
    echo
    echo -e "${YELLOW}ClickUp:${NC}"
    echo "  create-ticket       - Full ClickUp ticket creation template"
    echo "  create-ticket-full  - Detailed ticket template with examples"
    echo
    echo -e "${YELLOW}Workflows:${NC}"
    echo "  laravel-backend     - Complete Laravel developer workflow"
    echo "  laravel-complete    - Full Laravel backend workflow"
    echo
    echo -e "${YELLOW}Development:${NC}"
    echo "  feature            - Feature implementation template"
    echo "  api-endpoint       - API endpoint development"
    echo "  database-migration - Database migration template"
    echo
    echo -e "${YELLOW}Testing:${NC}"
    echo "  test-strategy      - Comprehensive testing strategy"
    echo "  comprehensive-test - Full testing template with examples"
    echo
    echo -e "${YELLOW}Debugging:${NC}"
    echo "  bug-investigation  - Bug investigation process"
    echo "  performance        - Performance optimization guide"
    echo
    echo -e "${YELLOW}DevOps:${NC}"
    echo "  deployment         - Deployment checklist"
    echo
    echo -e "${YELLOW}Reviews:${NC}"
    echo "  code-review        - Code review checklist"
    echo
    echo -e "${YELLOW}Refactoring:${NC}"
    echo "  refactor-plan      - Refactoring strategy template"
    echo
    echo -e "${YELLOW}Project-Specific:${NC}"
    echo "  usisa-laravel      - USISA Laravel developer workflow"
    echo
    echo "Usage: prompt-copy <template-name>"
    echo "Example: prompt-copy create-ticket"
}

# Find and copy template
copy_template() {
    local template_name="$1"
    local found=false
    local file_path=""
    
    # Map short names to full paths
    case "$template_name" in
        # ClickUp templates
        "create-ticket")
            file_path="$TEMPLATES_DIR/clickup/create-ticket-full.md"
            ;;
        "create-ticket-full")
            file_path="$TEMPLATES_DIR/clickup/create-ticket-full.md"
            ;;
            
        # Workflow templates
        "laravel-backend"|"laravel")
            file_path="$TEMPLATES_DIR/workflows/laravel-backend-complete.md"
            ;;
        "laravel-complete")
            file_path="$TEMPLATES_DIR/workflows/laravel-backend-complete.md"
            ;;
            
        # Development templates
        "feature"|"feature-implementation")
            file_path="$TEMPLATES_DIR/development/feature-implementation.md"
            ;;
        "api"|"api-endpoint")
            file_path="$AI_PROMPTS_DIR/templates/development/api-endpoint.md"
            ;;
        "migration"|"database-migration")
            file_path="$AI_PROMPTS_DIR/templates/development/database-migration.md"
            ;;
            
        # Testing templates
        "test"|"test-strategy")
            file_path="$AI_PROMPTS_DIR/templates/testing/test-strategy.md"
            ;;
        "comprehensive-test"|"testing")
            file_path="$TEMPLATES_DIR/testing/comprehensive-testing.md"
            ;;
            
        # Debugging templates
        "bug"|"bug-investigation")
            file_path="$AI_PROMPTS_DIR/templates/debugging/bug-investigation.md"
            ;;
        "performance"|"performance-optimization")
            file_path="$TEMPLATES_DIR/debugging/performance-optimization.md"
            ;;
            
        # DevOps templates
        "deployment"|"deploy")
            file_path="$TEMPLATES_DIR/devops/deployment-checklist.md"
            ;;
            
        # Review templates
        "review"|"code-review")
            file_path="$AI_PROMPTS_DIR/templates/reviews/code-review.md"
            ;;
            
        # Refactoring templates
        "refactor"|"refactor-plan")
            file_path="$AI_PROMPTS_DIR/templates/refactoring/refactor-plan.md"
            ;;
            
        # Project-specific
        "usisa"|"usisa-laravel")
            file_path="$TEMPLATES_DIR/projects/usisa/laravel-developer.md"
            ;;
            
        *)
            # Try to find the file in various locations
            if [[ -f "$TEMPLATES_DIR/$template_name.md" ]]; then
                file_path="$TEMPLATES_DIR/$template_name.md"
            elif [[ -f "$TEMPLATES_DIR/$template_name" ]]; then
                file_path="$TEMPLATES_DIR/$template_name"
            elif [[ -f "$AI_PROMPTS_DIR/templates/$template_name.md" ]]; then
                file_path="$AI_PROMPTS_DIR/templates/$template_name.md"
            elif [[ -f "$AI_PROMPTS_DIR/templates/$template_name" ]]; then
                file_path="$AI_PROMPTS_DIR/templates/$template_name"
            else
                # Search in subdirectories
                for dir in "$TEMPLATES_DIR"/*/ "$AI_PROMPTS_DIR/templates"/*/; do
                    if [[ -f "$dir$template_name.md" ]]; then
                        file_path="$dir$template_name.md"
                        break
                    elif [[ -f "$dir$template_name" ]]; then
                        file_path="$dir$template_name"
                        break
                    fi
                done
            fi
            ;;
    esac
    
    # Check if file exists and copy
    if [[ -n "$file_path" ]] && [[ -f "$file_path" ]]; then
        if command -v pbcopy &> /dev/null; then
            cat "$file_path" | pbcopy
            print_success "Template copied to clipboard: $template_name"
            print_info "Template from: $file_path"
            echo
            echo "Paste it into your LLM and fill in the placeholders!"
        else
            print_error "pbcopy not available on this system"
            print_info "Template location: $file_path"
        fi
    else
        print_error "Template not found: $template_name"
        echo
        show_templates
    fi
}

# Main
if [[ -z "$1" ]] || [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]] || [[ "$1" == "list" ]]; then
    show_templates
else
    copy_template "$1"
fi